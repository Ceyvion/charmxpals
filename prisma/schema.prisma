// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  handle    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  friendships    Friendship[] @relation("FriendshipInitiator")
  friendRequests Friendship[] @relation("FriendshipRecipient")
  ownedCharacters Ownership[]
  gameResults    GameResult[]
  invitesSent    Invite[]     @relation("InvitesSent")
  invitesAccepted Invite[]     @relation("InvitesAccepted")
  claimedUnits   PhysicalUnit[]
}

model Friendship {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  status    String   @default("pending") // pending, accepted, blocked
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User @relation("FriendshipInitiator", fields: [userId], references: [id])
  friend User @relation("FriendshipRecipient", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model Character {
  id          String   @id @default(uuid())
  setId       String
  name        String
  description String?
  rarity      Int      @default(1) // 1-5
  stats       Json     // e.g., { strength: 10, speed: 15, intelligence: 8 }
  artRefs     Json     // e.g., { thumbnail: "url", full: "url", 3dModel: "url" }
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  set        CharacterSet @relation(fields: [setId], references: [id])
  ownerships Ownership[]
  gameResults GameResult[]
  physicalUnits PhysicalUnit[]
}

model CharacterSet {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  characters Character[]
}

model PhysicalUnit {
  id          String   @id @default(uuid())
  characterId String
  codeHash    String   @unique // Hash of the unique code
  claimedBy   String?
  claimedAt   DateTime?
  secureSalt  String   // For cryptographic verification
  status      String   @default("available") // available, claimed, blocked
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  character Character @relation(fields: [characterId], references: [id])
  owner     User?     @relation(fields: [claimedBy], references: [id])

  @@index([codeHash])
}

model Ownership {
  id          String   @id @default(uuid())
  userId      String
  characterId String
  source      String   // claim, quest, referral, etc.
  cosmetics   String[] // List of cosmetic item IDs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user      User      @relation(fields: [userId], references: [id])
  character Character @relation(fields: [characterId], references: [id])

  @@unique([userId, characterId])
}

model GameResult {
  id          String   @id @default(uuid())
  userId      String
  characterId String
  type        String   // runner, battle, time-trial
  score       Int
  opponentRef String?  // Could be another user ID or AI identifier
  createdAt   DateTime @default(now())

  // Relationships
  user      User      @relation(fields: [userId], references: [id])
  character Character @relation(fields: [characterId], references: [id])
}

model Invite {
  id              String   @id @default(uuid())
  inviterId       String
  code            String   @unique
  acceptedBy      String?
  rewardGrantedAt DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  inviter   User @relation("InvitesSent", fields: [inviterId], references: [id])
  recipient User? @relation("InvitesAccepted", fields: [acceptedBy], references: [id])

  @@index([code])
}

model AbuseEvent {
  id        String   @id @default(uuid())
  type      String   // duplicate-attempt, unusual-velocity, geo-anomaly, etc.
  actorRef  String   // User ID or IP address
  metadata  Json     // Additional context
  createdAt DateTime @default(now())

  @@index([type])
  @@index([actorRef])
  @@index([createdAt])
}

model ClaimChallenge {
  id              String   @id @default(uuid())
  codeHash        String
  nonce           String
  timestamp       String
  challengeDigest String
  expiresAt       DateTime
  consumed        Boolean  @default(false)
  createdAt       DateTime @default(now())

  @@index([codeHash])
  @@index([expiresAt])
}
